import code
import os
import sys

import click

BASEDIRS = ["tests", "src"]
BASEFILES = ["requirements.txt", "README.md", "src/api.py", "CODEOWNERS"]


def touch(filename):
    with open(filename, "w") as fd:
        initial_string = "# This file was autogenerated by falcon."
        fd.write(initial_string)


def output_status(resource_type, resource_name, resource_status="created"):
    click.echo(f"{resource_status} {resource_type} {resource_name}")


@click.command()
@click.argument("name")
@click.option("--dockerfile", "-d", is_flag=True, help="Create empty Dockerfile")
@click.option("--models", "-m", is_flag=True, help="Create empty models.py file")
@click.option("--resources", "-r", is_flag=True, help="Create empty resources.py file")
@click.option("--tox", "-t", is_flag=True, help="Create empty tox.ini file")
@click.pass_context
def create(ctx, name, dockerfile, models, resources, tox):
    """Create a new project."""
    if os.path.exists(name):
        click.echo(f"Cowardly refusing to clobber existing directory {name}.")
        sys.exit(2)

    os.makedirs(name)
    os.chdir(name)
    output_status("directory", name)

    for dir in BASEDIRS:
        os.makedirs(dir)
        output_status("directory", dir)

    for file in BASEFILES:
        touch(file)
        output_status("file", file)

    if dockerfile:
        touch("Dockerfile")
        output_status("file", "Dockerfile")

    if models:
        touch("src/models.py")
        output_status("file", "src/models.py")

    if resources:
        touch("src/resources.py")
        output_status("file", "src/resources.py")

    if tox:
        touch("tox.ini")
        output_status("file", "tox.ini")


def check_exists(filename):
    default_paths = [
        "/usr/local/bin",
        os.path.join(os.path.expanduser("~/"), ".pyenv/shims"),
    ]

    found = False
    for path in default_paths:
        found = os.path.isfile(os.path.join(path, filename))

    return found


@click.command()
@click.option(
    "--wsgi_binary",
    "-w",
    default="gunicorn",
    help="Name of binary to use as the WSGI server",
)
@click.option(
    "--app",
    "-a",
    default="api",
    help="Name of the application's module which should be run.",
)
@click.option(
    "--port", "-p", default="8000", help="Port on which gunicorn should listen."
)
@click.option(
    "--ip", "-i", default="127.0.0.1", help="Address at which gunicorn should listen."
)
@click.option(
    "--workers",
    "-w",
    default="1",
    help="Number of gunicorn workers to handle requests.",
)
@click.pass_context
def run(ctx, wsgi_binary, app, port, ip, workers):
    """Start the Falcon application."""
    import subprocess

    command = [wsgi_binary, "-b", f"{ip}:{port}", "-w", workers, app]
    if check_exists(wsgi_binary):
        subprocess.run(command)
    else:
        print(f"Could not find {wsgi_binary}. Exiting.")


@click.command()
@click.pass_context
def shell(ctx):
    """Start an Ipython-based shell."""
    try:
        import IPython

        IPython.start_ipython(argv=[])
    except ModuleNotFoundError:
        print("Cannot find IPython. Falling back to Python console.")
        code.interact()
